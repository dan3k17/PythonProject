import asyncio
from aiogram import Router, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from handlers.menu import build_menu_text
from database.db import save_user_to_db, delete_user_from_db, get_user_data, on_startup, on_shutdown

router = Router()


class RegistrationStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_age = State()
    waiting_for_gender = State()
    waiting_for_weight = State()
    waiting_for_height = State()
    waiting_for_allergy_confirmation = State()
    waiting_for_allergies = State()
    waiting_for_goal = State()
    waiting_for_timeframe = State()
    waiting_for_confirmation = State()
    waiting_for_delete_confirmation = State()


async def bot_startup():
    on_startup()


async def bot_shutdown():
    on_shutdown()


@router.message(Command("start"))
async def start_handler(msg: types.Message, state: FSMContext):
    user_id = msg.from_user.id
    await state.update_data(user_id=user_id)
    await msg.answer(f"–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞.\n–¢–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: {user_id}\n\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(RegistrationStates.waiting_for_name)


@router.message(Command("mydata"))
async def mydata_handler(msg: types.Message, state: FSMContext):
    user_id = msg.from_user.id
    loop = asyncio.get_running_loop()
    user_data = await loop.run_in_executor(None, get_user_data, user_id)
    if user_data:
        summary = (f"üìã <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ</b>:\n\n"
                   f"üÜî ID: {user_data['user_id']}\n"
                   f"üë§ –ò–º—è: {user_data['name']}\n"
                   f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']}\n"
                   f"‚öß –ü–æ–ª: {user_data['gender']}\n"
                   f"‚öñ –í–µ—Å: {user_data['weight']} –∫–≥\n"
                   f"üìè –†–æ—Å—Ç: {user_data['height']} —Å–º\n"
                   f"üåø –ê–ª–ª–µ—Ä–≥–∏–∏: {user_data['allergies']}\n"
                   f"üéØ –¶–µ–ª—å: {user_data['goal']}\n"
                   f"‚è≥ –°—Ä–æ–∫: {user_data['timeframe']}")
        await msg.answer(summary)
    else:
        await msg.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")


@router.message(Command("regenerate"))
async def regenerate_handler(msg: types.Message, state: FSMContext):
    user_id = msg.from_user.id
    loop = asyncio.get_running_loop()
    user_data = await loop.run_in_executor(None, get_user_data, user_id)

    if not user_data:
        await msg.reply("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    processing_msg = await msg.reply("‚è≥ –°–æ—Å—Ç–∞–≤–ª—è—é –Ω–æ–≤—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è...")
    menu_text = await build_menu_text(user_data)
    await processing_msg.delete()
    await msg.reply(menu_text)


@router.message(Command("delete"))
async def delete_handler(msg: types.Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–∞, —É–¥–∞–ª–∏—Ç—å")],
            [KeyboardButton(text="–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await msg.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç? –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.", reply_markup=keyboard)
    await state.set_state(RegistrationStates.waiting_for_delete_confirmation)


@router.message(StateFilter(RegistrationStates.waiting_for_delete_confirmation))
async def process_delete_confirmation(message: types.Message, state: FSMContext):
    if message.text == "–î–∞, —É–¥–∞–ª–∏—Ç—å":
        user_id = message.from_user.id
        loop = asyncio.get_running_loop()
        await loop.run_in_executor(None, delete_user_from_db, user_id)
        await message.reply("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.\n"
                            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start.")
        await state.clear()
    elif message.text == "–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å":
        await message.reply(
            "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ '–í–ø–µ—Ä—ë–¥ –∫ —Ü–µ–ª–∏' –¥–ª—è –º–µ–Ω—é, /mydata –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, /regenerate –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ –∏–ª–∏ /delete –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        await state.set_state(RegistrationStates.waiting_for_confirmation)
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞, —É–¥–∞–ª–∏—Ç—å' –∏–ª–∏ '–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å'.")

@router.message(StateFilter(RegistrationStates.waiting_for_name))
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.reply("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    await state.set_state(RegistrationStates.waiting_for_age)

@router.message(StateFilter(RegistrationStates.waiting_for_age))
async def process_age(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) < 10 or int(message.text) > 100:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 10 –¥–æ 100 –ª–µ—Ç).")
        return
    await state.update_data(age=int(message.text))
    await message.reply("–ö–∞–∫–æ–π —É —Ç–µ–±—è –ø–æ–ª? (–ú/–ñ)")
    await state.set_state(RegistrationStates.waiting_for_gender)

@router.message(StateFilter(RegistrationStates.waiting_for_gender))
async def process_gender(message: types.Message, state: FSMContext):
    gender = message.text.strip().lower()
    if gender not in ["–º", "–∂"]:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ '–ú' (–º—É–∂—Å–∫–æ–π) –∏–ª–∏ '–ñ' (–∂–µ–Ω—Å–∫–∏–π).")
        return
    await state.update_data(gender="–ú—É–∂—Å–∫–æ–π" if gender == "–º" else "–ñ–µ–Ω—Å–∫–∏–π")
    await message.reply("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–≤ –∫–≥)?")
    await state.set_state(RegistrationStates.waiting_for_weight)

@router.message(StateFilter(RegistrationStates.waiting_for_weight))
async def process_weight(message: types.Message, state: FSMContext):
    try:
        weight = float(message.text.replace(',', '.'))
        await state.update_data(weight=weight)
        await message.reply("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç (–≤ —Å–º)?")
        await state.set_state(RegistrationStates.waiting_for_height)
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5).")

@router.message(StateFilter(RegistrationStates.waiting_for_height))
async def process_height(message: types.Message, state: FSMContext):
    try:
        height = int(message.text)
        await state.update_data(height=height)
        await message.reply("–£ —Ç–µ–±—è –µ—Å—Ç—å –∞–ª–ª–µ—Ä–≥–∏–∏? (–î–∞/–ù–µ—Ç)")
        await state.set_state(RegistrationStates.waiting_for_allergy_confirmation)
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

@router.message(StateFilter(RegistrationStates.waiting_for_allergy_confirmation))
async def process_allergy_confirmation(message: types.Message, state: FSMContext):
    if message.text.lower() == "–¥–∞":
        await state.set_state(RegistrationStates.waiting_for_allergies)
        await message.reply("–ü–µ—Ä–µ—á–∏—Å–ª–∏ —Å–≤–æ–∏ –∞–ª–ª–µ—Ä–≥–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–æ–ª–æ–∫–æ, –æ—Ä–µ—Ö–∏).")
    else:
        await state.update_data(allergies="–ù–µ—Ç")
        await message.reply("–ö–∞–∫–æ–≤–∞ —Ç–≤–æ—è —Ü–µ–ª—å? (–ü–æ—Ö—É–¥–µ–Ω–∏–µ, –ù–∞–±–æ—Ä –º–∞—Å—Å—ã, –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞)")
        await state.set_state(RegistrationStates.waiting_for_goal)

@router.message(StateFilter(RegistrationStates.waiting_for_allergies))
async def process_allergies(message: types.Message, state: FSMContext):
    await state.update_data(allergies=message.text.strip())
    await message.reply("–ö–∞–∫–æ–≤–∞ —Ç–≤–æ—è —Ü–µ–ª—å? (–ü–æ—Ö—É–¥–µ–Ω–∏–µ, –ù–∞–±–æ—Ä –º–∞—Å—Å—ã, –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞)")
    await state.set_state(RegistrationStates.waiting_for_goal)

@router.message(StateFilter(RegistrationStates.waiting_for_goal))
async def process_goal(message: types.Message, state: FSMContext):
    await state.update_data(goal=message.text.strip())
    await message.reply("–ó–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ç—ã —Ö–æ—á–µ—à—å –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏? (3 –º–µ—Å—è—Ü–∞, –ü–æ–ª–≥–æ–¥–∞, –ì–æ–¥)")
    await state.set_state(RegistrationStates.waiting_for_timeframe)

@router.message(StateFilter(RegistrationStates.waiting_for_timeframe))
async def process_timeframe(message: types.Message, state: FSMContext):
    await state.update_data(timeframe=message.text.strip())
    user_data = await state.get_data()

    summary = (f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
               f"üÜî ID: {user_data['user_id']}\n"
               f"üë§ –ò–º—è: {user_data['name']}\n"
               f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']}\n"
               f"‚öß –ü–æ–ª: {user_data['gender']}\n"
               f"‚öñ –í–µ—Å: {user_data['weight']} –∫–≥\n"
               f"üìè –†–æ—Å—Ç: {user_data['height']} —Å–º\n"
               f"üåø –ê–ª–ª–µ—Ä–≥–∏–∏: {user_data['allergies']}\n"
               f"üéØ –¶–µ–ª—å: {user_data['goal']}\n"
               f"‚è≥ –°—Ä–æ–∫: {user_data['timeframe']}")

    loop = asyncio.get_running_loop()
    await loop.run_in_executor(None, save_user_to_db, user_data)

    await message.reply(summary)
    await message.reply(
        "–ù–∞–ø–∏—à–∏—Ç–µ '–í–ø–µ—Ä—ë–¥ –∫ —Ü–µ–ª–∏' –¥–ª—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è, /mydata –¥–ª—è –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö, /regenerate –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ –∏–ª–∏ /delete –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    await state.set_state(RegistrationStates.waiting_for_confirmation)


@router.message(StateFilter(RegistrationStates.waiting_for_confirmation))
async def send_menu(message: types.Message, state: FSMContext):
    if message.text.lower().replace("—ë", "–µ").strip() == "–≤–ø–µ—Ä–µ–¥ –∫ —Ü–µ–ª–∏":
        user_id = message.from_user.id
        loop = asyncio.get_running_loop()
        user_data = await loop.run_in_executor(None, get_user_data, user_id)

        if not user_data:
            await message.reply("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return

        processing_msg = await message.reply("‚è≥ –°–æ—Å—Ç–∞–≤–ª—è—é –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è...")
        menu_text = await build_menu_text(user_data)
        await processing_msg.delete()
        await message.reply(menu_text)
    else:
        await message.reply(
            "–ù–∞–ø–∏—à–∏—Ç–µ '–í–ø–µ—Ä—ë–¥ –∫ —Ü–µ–ª–∏' –¥–ª—è –ø–ª–∞–Ω–∞, /mydata –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, /regenerate –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ –∏–ª–∏ /delete –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")